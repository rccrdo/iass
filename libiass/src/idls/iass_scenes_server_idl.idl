/*
 * Copyright (c) 2006-2007 Riccardo Lucchese, riccardo.lucchese at gmail.com
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 *    1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 
 *    2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 
 *    3. This notice may not be removed or altered from any source
 *    distribution.
 */

#ifndef iass_scenes_server_idl_IDL
#define iass_scenes_server_idl_IDL

#include "iass_corba_rpc_types.idl"
#include "iass_tunnel_idl.idl"


/** \interface iass_scenes_server_idl
 *  \brief CORBA part of the iass_scenes_server obj interface
 */
  interface iass_scenes_server_idl {

    /* the caller specifies the _scene_id of the scene he wants to subscribe as master(ie iass|designer)
     *  pwd is used only as return value, filled with a variable length stream representing the access password
     *  to unsubscribe the master from the scene; this avoids any a master discarding another master */
    iass_tunnel_idl subscribe_scene_master(in unsigned short _scene_id, inout iass_corba_raw_stream pwd);
    oneway void unsubscribe_scene_master(in unsigned short _scene_id, in iass_corba_raw_stream pwd);


    /* the caller specifies the _scene_id of the scene he wants to subscribe to and the ior
     *  address of his scene_mngr incoming tunnel
     * - returns true on success, false otherwise
     * ! the same _ior is used also ad identification id in unsubscribe_spectator;
          this avoids the possibility for subscribers to cancel each other */
    boolean subscribe_spectator(in unsigned short _scene_id, in iass_corba_raw_stream _ior);
    oneway void unsubscribe_spectator(in unsigned short _scene_id, in iass_corba_raw_stream _ior);

    /* create a new scene */
    iass_tunnel_idl new_scene();
  };


#endif /* iass_scenes_server_idl_IDL */
